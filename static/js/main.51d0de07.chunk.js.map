{"version":3,"sources":["components/Logo.js","components/Nav.js","components/Search.js","components/Selector.js","components/Result.js","components/Recommand.js","pages/main.js","App.js","reportWebVitals.js","index.js"],"names":["Logo","type","id","Nav","className","to","Search","props","useState","searchStr","setSearchStr","placeholder","value","onChange","e","target","onClick","onSubmit","Selector","selected","setSelected","lists","db","language","service","printchange","checked","concat","filter","version","useEffect","map","content","category","versions","index","Result","Recommand","Main","checklist","setChecklist","searchString","setSearchString","usable","setUsable","recommends","setRecommends","console","log","fetch","process","then","response","json","string","selectedValue","result","recommands","App","basename","exact","path","render","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51d0de07.chunk.js","sourcesContent":["import React from 'react';\nimport './css/Logo.css'\n\nconst Logo = ({type}) => {\n    return (\n        <h1 id=\"logo\">\n            {type} Reservation Words\n        </h1>\n    );\n};\n\nexport default Logo;","import React from \"react\";\nimport {Link} from 'react-router-dom';\nimport './css/Nav.css'\n\nconst Nav = ({type}) => {\n    return (\n        <header className=\"topnav\">\n            <Link to=\"/db\">DB</Link>\n            <Link to=\"/language\">Language</Link>\n            <Link to=\"/service\">Service</Link>\n        </header>\n    );\n};\n\nexport default Nav;","import React, {useState} from 'react';\nimport './css/Search.css';\n\nconst Search = (props) => {\n    const [searchStr, setSearchStr] = useState(\"\");\n\n    const getSearchString = (e) => {\n        setSearchStr(e.target.value);\n    };\n\n    const searchReservations = (value) => {\n        props.onSubmit(searchStr)\n    };\n    return (\n        <div className=\"search\">\n            <input className=\"search_box\" placeholder=\"search\" value={searchStr} type=\"text\"\n                   onChange={getSearchString}/>\n            <button className=\"search_btn\" onClick={searchReservations}>Search</button>\n        </div>\n    )\n};\n\nexport default Search;","import React, {useEffect, useState} from 'react';\nimport db from '../data/db/versions';\nimport language from '../data/language/versions';\nimport service from '../data/service/versions';\nimport './css/Selector.css'\n\nconst Selector = ({type, onSubmit}) => {\n    const [selected, setSelected] = useState([]);\n    let lists = [];\n    if (type === \"DB\")\n        lists = db;\n    else if (type === \"Language\")\n        lists = language;\n    else if (type === \"Service\")\n        lists = service;\n    const printchange = (e) => {\n        if (e.target.checked)\n            setSelected(selected.concat(e.target.value));\n        else\n            setSelected(selected.filter(version => version !== e.target.value));\n    };\n    useEffect(() => {\n        onSubmit(selected)\n        // eslint-disable-next-line\n    }, [selected]);\n\n    return (\n        <ol className=\"test\">\n            {lists.map((content) =>\n                <li className=\"category\">\n                    {content.category}\n                    <ul>\n                        {content.version.map((versions, index) =>\n                            <li key={index} className=\"versions\">\n                                <label>\n                                    <input\n                                        type=\"checkbox\"\n                                        value={content.category + \" \" + versions}\n                                        onChange={printchange}\n                                    />{versions}\n                                </label>\n                            </li>)\n                        }\n                    </ul>\n                </li>\n            )}\n        </ol>\n    )\n};\n\nexport default Selector;","import React from 'react';\nimport './css/Selector.css'\n\nconst Result = (props) => {\n\n    return (\n        <div>결과</div>\n    )\n};\n\nexport default Result;","import React from 'react';\nimport './css/Search.css';\n\nconst Recommand = () => {\n\n    return (\n        <div>추천</div>\n    )\n};\n\nexport default Recommand;","import React, {useEffect, useState} from \"react\";\nimport Logo from \"../components/Logo\";\nimport Nav from \"../components/Nav\";\nimport Search from \"../components/Search\";\nimport Selector from \"../components/Selector\";\nimport Result from \"../components/Result\";\nimport Recommand from \"../components/Recommand\";\nimport './main.css'\n\nconst Main = ({type}) => {\n    const [checklist, setChecklist] = useState([]);\n    const [searchString, setSearchString] = useState(\"\");\n    const [usable, setUsable] = useState([]);\n    const [recommends, setRecommends] = useState(\"\");\n\n    const getVersions = (selectedValue) => setChecklist(selectedValue);\n    const getSearchStrings = (string) => setSearchString(string);\n\n    useEffect(() => {\n        console.log(checklist);\n        // 이부분에서 검사할 json들 로드.(json 인덱스 순서도 맞춰주자) 아마 하나바뀔때마다 반영되어 쉬울듯\n        // 리스트에서 추가된 부분 처리\n        // 이전 구조처럼 public 폴더에 데이터 폴더 옯기고 작업하면 가능\n        fetch(process.env.PUBLIC_URL + '/data/test.json')\n            .then(response => response.json())\n            .then(response => console.log(response))\n        // 리스트에서 제거된 부분 처리\n    }, [checklist]);\n\n    useEffect(() => {\n        console.log(searchString);\n        // 검색로직 여기에 하거나 따로 파일 빼도 됨\n\n        // 통과한 checklist 추가\n        setUsable(\"\");\n        // 검색 후 불가한 DB가 생기면 동의어 조회해서 여기에 넘겨주면 됨\n        setRecommends(\"\")\n    }, [searchString]);\n\n    return (\n        <div className=\"main\">\n            <Nav/>\n            <Logo type={type}/>\n            <Search onSubmit={getSearchStrings}/>\n            <Selector type={type} onSubmit={getVersions}/>\n            <Result result={usable}/>\n            <Recommand recommands={recommends}/>\n            <footer/>\n        </div>\n    );\n};\n\nexport default Main;","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport './App.css';\nimport Main from \"./pages/main\";\n\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Router basename={process.env.PUBLIC_URL}>\n                <Switch>\n                    <Route exact path='/' render={() => <Main type=\"DB\"/>}/>\n                    <Route path='/db' render={() => <Main type=\"DB\"/>}/>\n                    <Route path='/language' render={() => <Main type=\"Language\"/>}/>\n                    <Route path='/service' render={() => <Main type=\"Service\"/>}/>\n                </Switch>\n            </Router>\n        )\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}