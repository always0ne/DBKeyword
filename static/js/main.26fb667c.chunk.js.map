{"version":3,"sources":["components/Logo.js","components/Nav.js","components/Search.js","components/Category.js","components/Selector.js","components/Result.js","components/Recommend.js","components/Footer.js","pages/main.js","App.js","reportWebVitals.js","index.js"],"names":["Logo","type","id","withRouter","props","changeService","service","flush","history","push","className","onClick","href","target","rel","src","process","alt","Search","useState","searchStr","setSearchStr","searchReservations","onSubmit","toUpperCase","placeholder","value","onChange","e","onKeyPress","key","Category","isOpened","setIsOpened","versionBox","setVersionBox","useEffect","content","version","map","category","checked","Array","from","length","versionLists","versions","index","printChange","Collapse","slice","concat","reportChecked","Selector","selected","setSelected","lists","setLists","fetch","then","response","json","a","filter","newList","Result","checklist","v","result","undefined","Recommend","dictionary","setDictionary","searchString","toLowerCase","data","usable","find","reserved","resultString","recommend","recommendWords","window","open","Footer","Main","setChecklist","words","setWords","setSearchString","setResult","isUsable","setIsUsable","search","setSearch","validateUsable","list","string","Promise","mapSeries","categoryData","split","selectedValue","App","basename","exact","path","render","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26fb667c.chunk.js","sourcesContent":["import React from 'react';\nimport './css/Logo.css'\n\nconst Logo = ({type}) => {\n    return (\n        <h1 id=\"logo\">\n            {type} Reservation Words\n        </h1>\n    );\n};\n\nexport default Logo;","import React from \"react\";\nimport './css/Nav.css'\nimport {withRouter} from \"react-router-dom\"\n\nconst Nav = (props) => {\n    const changeService = (service) => {\n        props.flush()\n        props.history.push(\"/\" + service)\n    };\n\n    return (\n        <header className=\"topnav\">\n            <li onClick={() => changeService(\"DB\")}>DB</li>\n            <li onClick={() => changeService(\"Language\")}>Language</li>\n            <li onClick={() => changeService(\"Service\")}>Service</li>\n            <a href=\"https://github.com/always0ne/reserved-words\" target=\"_blank\" rel=\"noreferrer\">\n                <img src={process.env.PUBLIC_URL + '/img/github.png'} alt=\"check\"/>\n            </a>\n        </header>\n    );\n};\n\nexport default withRouter(Nav);","import React, {useState} from 'react';\nimport './css/Search.css';\n\nconst Search = (props) => {\n    const [searchStr, setSearchStr] = useState(\"\");\n\n    const getSearchString = (e) => setSearchStr(e.target.value);\n    const searchReservations = () => {\n        if (props.type === 'DB')\n            props.onSubmit(searchStr.toUpperCase());\n        else\n            props.onSubmit(searchStr);\n    };\n\n    const handleKeyPress = (e) => {\n        if (e.key === \"Enter\")\n            searchReservations()\n    };\n\n    return (\n\n        <div className=\"search\">\n            <input className=\"search_box\" placeholder=\"search\" value={searchStr} type=\"text\"\n                   onChange={getSearchString} onKeyPress={handleKeyPress}/>\n            <button className=\"search_btn\" onClick={searchReservations}>Search</button>\n        </div>\n    )\n};\n\nexport default Search;","import React, {useEffect, useState} from 'react';\r\nimport {Collapse} from \"react-collapse/lib/Collapse\";\r\nimport './css/Category.css';\r\n\r\nconst Category = (props) => {\r\n    const [isOpened, setIsOpened] = useState(false);\r\n    const [versionBox, setVersionBox] = useState([]);\r\n    useEffect(() => {\r\n        setIsOpened(false)\r\n        setVersionBox(props.content.version.map(() => {\r\n            return false\r\n        }));\r\n    }, [props.content]);\r\n\r\n    function collapseVersions() {\r\n        if (isOpened === true) {\r\n            setVersionBox(Array.from(({length: versionBox.length}), ()=> false));\r\n        } else {\r\n            setVersionBox(Array.from(({length: versionBox.length}), ()=> true));\r\n        }\r\n        let versionLists = props.content.version.map((versions, index) => props.content.category + \" \" + versions)\r\n        props.printChange(!isOpened,versionLists)\r\n        setIsOpened(!isOpened)\r\n    }\r\n\r\n    function reportChecked(e, index) {\r\n        setVersionBox(versionBox.slice(0,index).concat(e.target.checked).concat(versionBox.slice(index + 1)));\r\n        props.printChange(e.target.checked, e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className=\"category\">\r\n            <label>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    value={props.content.category}\r\n                    checked={isOpened}\r\n                    onChange={collapseVersions}\r\n                />{props.content.category}\r\n            </label>\r\n            <li className=\"category\">\r\n                <Collapse isOpened={isOpened}>\r\n                    <ul>\r\n                        {\r\n                            props.content.version.map((versions, index) => {\r\n                                return (<li key={versions + index} className=\"versions\">\r\n                                    <label>\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            value={props.content.category + \" \" + versions}\r\n                                            checked={versionBox[index]}\r\n                                            onChange={(e) => reportChecked(e, index)}\r\n                                        />{versions}\r\n                                    </label>\r\n                                </li>)\r\n                            })\r\n                        }\r\n                    </ul>\r\n                </Collapse>\r\n            </li>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Category;","import React, {useEffect, useState} from 'react';\nimport './css/Selector.css'\nimport './css/More.css'\nimport Category from './Category'\n\nconst Selector = ({type, onSubmit}) => {\n    const [selected, setSelected] = useState([]);\n    const [lists, setLists] = useState([]);\n\n\n    useEffect(() => fetch(process.env.PUBLIC_URL + '/data/' + type + '/versions.json')\n        .then(response => response.json())\n        .then(response => {\n            setLists(response);\n            // eslint-disable-next-line\n        })\n        .then(() => setSelected([])\n        ), [type]);\n\n    const printChange = async (checked, value) => {\n        if (checked)\n            setSelected(selected.concat(value));\n        else {\n            if (value[0].length === 1)\n                setSelected(selected.filter(version => version !== value));\n            else {\n                let newList = selected;\n                await value.map((value) => newList = newList.filter(version => version !== value));\n                setSelected(newList);\n            }\n        }\n    };\n    useEffect(() => {\n        onSubmit(selected)\n        // eslint-disable-next-line\n    }, [selected]);\n\n    return (\n        <div>\n            <h2 id=\"instruction\">Select your environments!</h2>\n            <ol className=\"test\">\n                {lists.map((content, index) =>\n                    <Category content={content} key={index} printChange={printChange}/>\n                )}\n            </ol>\n        </div>\n\n    )\n};\n\nexport default Selector;","import React from 'react';\nimport './css/Result.css'\n\nconst Result = (props) => {\n\n    const printTrueFalse = (result) => {\n        if (props.searchStr === '')\n            return <img className=\"resultImg\" src={process.env.PUBLIC_URL + '/img/question_image.png'} alt=\"check\"/>;\n        if (result === undefined)\n            return <img className=\"resultImg\" src={process.env.PUBLIC_URL + '/img/question_image.png'} alt=\"check\"/>;\n        else if (result === true)\n            return <img className=\"resultImg\" src={process.env.PUBLIC_URL + '/img/check_image.png'} alt=\"check\"/>;\n        else if (result === false)\n            return <img className=\"resultImg\" src={process.env.PUBLIC_URL + '/img/cross_image.png'} alt=\"cross\"/>;\n    };\n\n    return (\n        <div>\n            <h2>Availability of \"{props.searchStr}\"</h2>\n            <table>\n                <tbody>\n                <tr>\n                    <th>version</th>\n                    <th>available</th>\n                </tr>\n                {\n                    props.checklist.map((v, index) =>\n                        <tr key={index}>\n                            <td>{v}</td>\n                            <td>{printTrueFalse(props.result[index])}</td>\n                        </tr>\n                    )}\n                </tbody>\n            </table>\n        </div>\n    )\n};\n\nexport default Result;","import React, {useEffect, useState} from 'react';\nimport './css/Recommend.css';\n\n\nconst Recommend = (props) => {\n    const [dictionary, setDictionary] = useState([]);\n    useEffect(() => {\n        fetch(process.env.PUBLIC_URL + '/data/recommends/'+props.searchString[0].toLowerCase()+'.json')\n            .then(response => response.json())\n            .then(data => setDictionary(data));\n    }, [props.searchString]);\n\n    const recommendWords = () => {\n        if (props.usable === false) {\n            let result = dictionary.find(data => data.reserved === props.searchString)\n            if (result !== undefined) {\n                let resultString = \"\";\n                result.recommend.map(data => {\n                    if (resultString === \"\")\n                        resultString = resultString.concat(data);\n                    else\n                        resultString = resultString.concat(\", \", data);\n                    return true\n                });\n                return (\n                    <div>\n                        <h3>{resultString}</h3>\n                        <h3>If there is a better variable name, please recommend it!</h3>\n                    </div>\n                )\n            } else {\n                return (\n                    <div>\n                        <h3>We haven't found a suitable variable name yet.<br/>\n                        If there is a good variable name, please recommend it!</h3>\n                    </div>\n                )\n            }\n        }\n    };\n\n    return (\n        <div id=\"recommend\">\n            <h2>Recommend Words</h2>\n            {recommendWords()}\n            <button type=\"button\" className=\"recommendBtn\" onClick={() =>window.open('https://github.com/always0ne/reserved-words/issues/33')}>\n                Recommend variable names!\n            </button>\n        </div>\n    )\n};\n\nexport default Recommend;","import React from 'react';\r\nimport './css/Footer.css'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <div id=\"copyright\">\r\n                Copyright &copy;2020 <b>reserved-words</b> All rights reserved.<br/>\r\n                We welcome contributors. Please contribute to the project!\r\n            </div>\r\n\r\n        </footer>\r\n    )\r\n}\r\nexport default Footer;","import React, {useEffect, useState} from \"react\";\nimport Logo from \"../components/Logo\";\nimport Nav from \"../components/Nav\";\nimport Search from \"../components/Search\";\nimport Selector from \"../components/Selector\";\nimport Result from \"../components/Result\";\nimport Recommend from \"../components/Recommend\";\nimport Footer from \"../components/Footer\"\nimport {Promise} from \"bluebird\";\nimport './main.css'\n\nconst Main = ({type}) => {\n    const [checklist, setChecklist] = useState([]);\n    const [words, setWords] = useState([]);\n    const [searchString, setSearchString] = useState(\"\");\n    const [result, setResult] = useState([]);\n    const [isUsable, setIsUsable] = useState(true);\n    const [search, setSearch] = useState(false);\n\n    const getVersions = (selectedValue) => setChecklist(selectedValue);\n    const validateUsable = (list, string) => list.reserved.filter(words => words === string).length === 0;\n    const getSearchStrings = (string) => {\n        setSearchString(string);\n        setSearch(true)\n    };\n    const flush = () => {\n        setSearchString(\"\");\n        setChecklist([]);\n        setResult([]);\n        setIsUsable([]);\n        setWords([]);\n    };\n\n    useEffect(() => {\n        Promise.mapSeries(checklist, (category) => {\n            let categoryData = category.split(' ');\n            if (categoryData[0] === \"c#\") {\n                categoryData[0] = \"cSharp\";\n                categoryData[1] = \"cSharp\";\n            }\n            return fetch(process.env.PUBLIC_URL + '/data/' + type + '/' + categoryData[0] + '/' + categoryData[1] + '.json')\n                .then(response => response.json());\n        }).then(json => setWords(json));\n        // eslint-disable-next-line\n    }, [checklist]);\n\n    useEffect(() => {\n        // Must changed\n        setResult(words.map((reserved) => validateUsable(reserved, searchString)));\n        // eslint-disable-next-line\n    }, [words]);\n\n    useEffect(() => {\n        if (search === true) {\n            setResult(words.map((reserved) => validateUsable(reserved, searchString)));\n            setSearch(false)\n        }\n        // eslint-disable-next-line\n    }, [search]);\n\n    useEffect(() => {\n        setIsUsable(result.find(usable => usable === false))\n    }, [result]);\n\n    return (\n        <div>\n            <div className=\"contents-wrap\">\n                <Nav type={type} flush={flush}/>\n                <Logo type={type}/>\n                <Search type={type} onSubmit={getSearchStrings}/>\n                <Selector type={type} onSubmit={getVersions}/>\n                {searchString!==\"\"?<Result result={result} checklist={checklist} searchStr={searchString}/>:\"\"}\n                {searchString!==\"\" && isUsable!==undefined?<Recommend usable={isUsable} searchString={searchString}/>:\"\"}\n            </div>\n            <Footer/>\n        </div>\n    );\n};\n\nexport default Main;","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport './App.css';\nimport Main from \"./pages/main\";\n\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Router basename={process.env.PUBLIC_URL}>\n                <Switch>\n                    <Route exact path='/' render={() => <Main type=\"DB\"/>}/>\n                    <Route path='/DB' render={() => <Main type=\"DB\"/>}/>\n                    <Route path='/language' render={() => <Main type=\"Language\"/>}/>\n                    <Route path='/service' render={() => <Main type=\"Service\"/>}/>\n                </Switch>\n            </Router>\n        )\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}